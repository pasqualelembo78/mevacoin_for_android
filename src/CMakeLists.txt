cmake_minimum_required(VERSION 3.5)
project(MevacoinCore)
# Build statically
add_definitions(-DSTATICLIB)

# Add external libraries as include dirs, so we can do #include "httplib" for example
include_directories(${CMAKE_SOURCE_DIR}/external/rocksdb/include)
include_directories(${CMAKE_SOURCE_DIR}/external/cpp-linenoise)
include_directories(${CMAKE_SOURCE_DIR}/external/cpp-httplib)
include_directories(${CMAKE_SOURCE_DIR}/external/nlohmann-json)
include_directories(${CMAKE_SOURCE_DIR}/external/rapidjson)
include_directories(${CMAKE_SOURCE_DIR}/external/cxxopts)
include_directories(${CMAKE_SOURCE_DIR}/external/cryptopp)

# Show cmake where the source files are
# Note, if you add remove a source file, you will need to re-run cmake so it
# can find the new file
file(GLOB_RECURSE blockchain_explorer blockchain_explorer/*)
file(GLOB_RECURSE common common/*)
file(GLOB_RECURSE crypto crypto/*)
file(GLOB_RECURSE mevacoin_core mevacoin_core/* mevacoin_config.h)
file(GLOB_RECURSE mevacoin_protocol mevacoin_protocol/*)
file(GLOB_RECURSE crypto_test crypto_test/*)
file(GLOB_RECURSE errors errors/*)
file(GLOB_RECURSE http http/*)
file(GLOB_RECURSE json_rpc_server json_rpc_server/*)
file(GLOB_RECURSE logging logging/*)
file(GLOB_RECURSE miner miner/*)
file(GLOB_RECURSE mnemonics mnemonics/*)
file(GLOB_RECURSE nigel nigel/*)
file(GLOB_RECURSE node_rpc_proxy node_rpc_proxy/*)
file(GLOB_RECURSE p2p p2p/*)
file(GLOB_RECURSE rpc rpc/*)
file(GLOB_RECURSE serialization serialization/*)
file(GLOB_RECURSE service wallet_service/*)
file(GLOB_RECURSE sub_wallets sub_wallets/*)
file(GLOB_RECURSE transfers transfers/*)
file(GLOB_RECURSE mevacoind daemon/*)
file(GLOB_RECURSE utilities utilities/*)
file(GLOB_RECURSE wallet wallet/*)
file(GLOB_RECURSE wallet_api wallet_api/*)
file(GLOB_RECURSE wallet_backend wallet_backend/*)
file(GLOB_RECURSE zedwallet zedwallet/*)
file(GLOB_RECURSE zedwallet++ zedwallet++/*)

if(MSVC)
    file(GLOB_RECURSE syst syst/* platform/windows/syst/*)
    include_directories(${CMAKE_SOURCE_DIR}/src/platform/windows/syst)
elseif(APPLE)
    file(GLOB_RECURSE syst syst/* platform/osx/syst/* platform/posix/syst/*)
    include_directories(${CMAKE_SOURCE_DIR}/src/platform/osx/syst)
    include_directories(${CMAKE_SOURCE_DIR}/src/platform/posix/syst)
else()
    file(GLOB_RECURSE syst syst/* platform/linux/syst/* platform/posix/syst/*)
    include_directories(${CMAKE_SOURCE_DIR}/src/platform/linux/syst)
    include_directories(${CMAKE_SOURCE_DIR}/src/platform/posix/syst)
endif()

# Group the files together in IDEs
source_group("" FILES $${common} ${crypto} ${mevacoin_core} ${mevacoin_protocol} ${mevacoind} ${json_rpc_server} ${http} ${logging} ${miner} ${mnemonics} ${nigel} ${node_rpc_proxy} ${p2p} ${rpc} ${serialization} ${syst} ${transfers} ${wallet} ${wallet_api} ${wallet_backend} ${zedwallet} ${zedwallet++} ${crypto_test} ${errors} ${utilities} ${sub_wallets})

# Define a group of files as a library to link against
add_library(blockchain_explorer STATIC ${blockchain_explorer})
add_library(common STATIC ${common})
add_library(crypto STATIC ${crypto})
add_library(mevacoin_core STATIC ${mevacoin_core})
add_library(errors STATIC ${errors})
add_library(http STATIC ${http})
add_library(json_rpc_server STATIC ${json_rpc_server})
add_library(logging STATIC ${logging})
add_library(mnemonics STATIC ${mnemonics})
add_library(nigel STATIC ${nigel})
add_library(node_rpc_proxy STATIC ${node_rpc_proxy})
add_library(p2p STATIC ${mevacoin_protocol} ${p2p})
add_library(rpc STATIC ${rpc})
add_library(serialization STATIC ${serialization})
add_library(sub_wallets STATIC ${sub_wallets})
add_library(syst STATIC ${syst})
add_library(transfers STATIC ${transfers})
add_library(utilities STATIC ${utilities})
add_library(wallet STATIC ${wallet})
add_library(wallet_backend STATIC ${wallet_backend})
add_library(wallet_service STATIC ${service})

if(MSVC)
    set(DAEMON_SOURCES_OS
        binary_info/daemon.rc
    )
    set(ZED_WALLET_SOURCES_OS
        binary_info/zedwallet.rc
    )
    set(MINER_SOURCES_OS
        binary_info/miner.rc
    )
    set(PG_SOURCES_OS
        binary_info/service.rc
    )
    set(CT_SOURCES_OS
        binary_info/cryptotest.rc
    )
    set(WALLET_API_SOURCES_OS
        binary_info/walletapi.rc
    )
endif()

add_executable(crypto_test ${crypto_test} ${CT_SOURCES_OS})
# --- TARGET SHARED ---
add_library(miner SHARED ${miner} ${MINER_SOURCES_OS})
add_library(service SHARED ${service} ${PG_SOURCES_OS})
add_library(mevacoind SHARED ${mevacoind} ${DAEMON_SOURCES_OS})
add_library(wallet_api SHARED ${wallet_api} ${WALLET_API_SOURCES_OS})
add_library(zedwallet SHARED ${zedwallet} ${ZED_WALLET_SOURCES_OS})
add_library(zedwallet++ SHARED ${zedwallet++} ${ZED_WALLET_SOURCES_OS})

# Link SHARED
target_link_libraries(miner mevacoin_core rpc syst http crypto errors utilities)
target_link_libraries(service json_rpc_server wallet mnemonics errors)
target_link_libraries(mevacoind syst mevacoin_core rocksdb ${Boost_LIBRARIES})
target_link_libraries(wallet_api wallet_backend)
target_link_libraries(zedwallet mnemonics wallet errors utilities)
target_link_libraries(zedwallet++ wallet_backend)

# --- TARGET STATIC ---
add_library(miner_static STATIC ${miner} ${MINER_SOURCES_OS})
set_property(TARGET miner_static PROPERTY OUTPUT_NAME "miner")
add_library(service_static STATIC ${service} ${PG_SOURCES_OS})
set_property(TARGET service_static PROPERTY OUTPUT_NAME "mevacoin-service")
add_library(mevacoind_static STATIC ${mevacoind} ${DAEMON_SOURCES_OS})
set_property(TARGET mevacoind_static PROPERTY OUTPUT_NAME "mevacoind")
add_library(wallet_api_static STATIC ${wallet_api} ${WALLET_API_SOURCES_OS})
set_property(TARGET wallet_api_static PROPERTY OUTPUT_NAME "wallet-api")
add_library(zedwallet_static STATIC ${zedwallet} ${ZED_WALLET_SOURCES_OS})
set_property(TARGET zedwallet_static PROPERTY OUTPUT_NAME "mvcwallet")
add_library(zedwallet++_static STATIC ${zedwallet++} ${ZED_WALLET_SOURCES_OS})
set_property(TARGET zedwallet++_static PROPERTY OUTPUT_NAME "mvcwallet-beta")

# Link STATIC
target_link_libraries(miner_static mevacoin_core rpc syst http crypto errors utilities)
target_link_libraries(service_static json_rpc_server wallet mnemonics errors)
target_link_libraries(mevacoind_static syst mevacoin_core rocksdb ${Boost_LIBRARIES})
target_link_libraries(wallet_api_static wallet_backend)
target_link_libraries(zedwallet_static mnemonics wallet errors utilities)
target_link_libraries(zedwallet++_static wallet_backend)

if(MSVC)
    target_link_libraries(syst ws2_32)
    target_link_libraries(mevacoind Rpcrt4)
    target_link_libraries(service Rpcrt4)
endif()

# A bit of hackery so we don't have to do the if/else/ for every target that
# wants to use filesystem
add_library(__filesystem INTERFACE)

# Windows works out of the box
if(APPLE)
    if(CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
        # Apply rules specific to x64 architecture on macOS
        target_link_libraries(__filesystem INTERFACE /usr/local/opt/llvm/lib/c++/libc++abi.a)
    elseif(CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
        # Apply rules specific to arm64 architecture on macOS (M1)
        target_link_libraries(__filesystem INTERFACE /opt/homebrew/opt/llvm/lib/c++/libc++abi.a)
    else()
        message(FATAL_ERROR "Unsupported macOS architecture")
    endif()
elseif(UNIX)
    # Non linkare più stdc++fs, std::filesystem è incluso in C++17 con libc++
    target_link_libraries(__filesystem INTERFACE)
endif()

target_link_libraries(mevacoind syst mevacoin_core rocksdb ${Boost_LIBRARIES})

# ---- BINARI NATIVI ANDROID ----
add_executable(mevacoind_bin ${mevacoind} ${DAEMON_SOURCES_OS})
target_link_libraries(mevacoind_bin syst mevacoin_core rocksdb ${Boost_LIBRARIES})
set_target_properties(mevacoind_bin PROPERTIES OUTPUT_NAME "mevacoind")

add_executable(miner_bin ${miner} ${MINER_SOURCES_OS})
target_link_libraries(miner_bin mevacoin_core rpc syst http crypto errors utilities)
set_target_properties(miner_bin PROPERTIES OUTPUT_NAME "miner")

add_executable(zedwallet_bin ${zedwallet} ${ZED_WALLET_SOURCES_OS})
target_link_libraries(zedwallet_bin mnemonics wallet errors utilities)
set_target_properties(zedwallet_bin PROPERTIES OUTPUT_NAME "mvcwallet")

add_executable(zedwalletpp_bin ${zedwallet++} ${ZED_WALLET_SOURCES_OS})
target_link_libraries(zedwalletpp_bin wallet_backend)
set_target_properties(zedwalletpp_bin PROPERTIES OUTPUT_NAME "mvcwallet-beta")

add_executable(service_bin ${service} ${PG_SOURCES_OS})
target_link_libraries(service_bin json_rpc_server wallet mnemonics errors)
set_target_properties(service_bin PROPERTIES OUTPUT_NAME "mevacoin-service")


# Add the dependencies we need
target_link_libraries(common __filesystem)
target_link_libraries(mevacoin_core common logging crypto p2p rpc http serialization syst ${Boost_LIBRARIES})
target_link_libraries(crypto_test crypto common)
target_link_libraries(errors sub_wallets)
target_link_libraries(logging common)
target_link_libraries(miner mevacoin_core rpc syst http crypto errors utilities)
target_link_libraries(nigel errors)
target_link_libraries(p2p mevacoin_core upnpc-static)
target_link_libraries(rpc p2p utilities)
target_link_libraries(service json_rpc_server wallet mnemonics errors)
target_link_libraries(sub_wallets utilities mevacoin_core)
target_link_libraries(wallet node_rpc_proxy transfers mevacoin_core common ${Boost_LIBRARIES})
target_link_libraries(wallet_api wallet_backend)
target_link_libraries(wallet_backend mnemonics mevacoin_core nigel cryptopp-static __filesystem utilities sub_wallets)
target_link_libraries(wallet_service mnemonics)
target_link_libraries(zedwallet mnemonics wallet errors utilities)
target_link_libraries(zedwallet++ wallet_backend)

# Add dependencies means we have to build the latter before we build the former
# In this case it's because we need to have the current version name rather
# than a cached one
add_dependencies(crypto_test version)
add_dependencies(miner version)
add_dependencies(json_rpc_server version)
add_dependencies(p2p version)
add_dependencies(rpc version)
add_dependencies(service version)
add_dependencies(mevacoind version)
add_dependencies(wallet_api version)
add_dependencies(wallet_service version)
add_dependencies(zedwallet version)

# Finally build the binaries
set_property(TARGET mevacoind PROPERTY OUTPUT_NAME "mevacoind")
set_property(TARGET zedwallet PROPERTY OUTPUT_NAME "mvcwallet")
set_property(TARGET zedwallet++ PROPERTY OUTPUT_NAME "mvcwallet-beta")
set_property(TARGET service PROPERTY OUTPUT_NAME "mevacoin-service")
set_property(TARGET miner PROPERTY OUTPUT_NAME "miner")
set_property(TARGET crypto_test PROPERTY OUTPUT_NAME "crypto_test")
set_property(TARGET wallet_api PROPERTY OUTPUT_NAME "wallet-api")

# Additional make targets, can be used to build a subset of the targets
# e.g. make pool will build only mevacoind and service
add_custom_target(pool DEPENDS mevacoind service)
add_custom_target(solominer DEPENDS mevacoind zedwallet miner)
add_custom_target(cli DEPENDS mevacoind zedwallet)
